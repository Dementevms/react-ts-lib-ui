{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    /* Projects */
    // "incremental": true,                              /* Сохраните файлы .tsbuildinfo, чтобы обеспечить инкрементную компиляцию проектов. */
    // "composite": true,                                /* Включите ограничения, позволяющие использовать проект TypeScript со ссылками на проект. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Укажите путь к файлу инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключите предпочтение исходных файлов вместо файлов объявлений при ссылке на составные проекты. */
    // "disableSolutionSearching": true,                 /* Отключить проверку ссылок на несколько проектов при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Уменьшите количество проектов, автоматически загружаемых TypeScript. */
    /* Language and Environment */
    "target": "es2016", //////////////////////////////////* Установите версию языка JavaScript для создаваемого JavaScript и включите совместимые объявления библиотеки. */
    // "lib": [],                                        /* Укажите набор связанных файлов объявлений библиотеки, описывающих целевую среду выполнения. */
    // "jsx": "preserve",                                /* Укажите, какой код JSX генерируется. */
    // "experimentalDecorators": true,                   /* Включите экспериментальную поддержку устаревших экспериментальных декораторов. */
    // "emitDecoratorMetadata": true,                    /* Выдавать метаданные типа дизайна для оформленных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Укажите фабричную функцию JSX, используемую при нацеливании на отправку React JSX, например. «React.createElement» или «h». */
    // "jsxFragmentFactory": "",                         /* Укажите ссылку на фрагмент JSX, используемую для фрагментов при нацеливании на отправку React JSX, например. «React.Fragment» или «Фрагмент». */
    // "jsxImportSource": "",                            /* Укажите спецификатор модуля, используемый для импорта фабричных функций JSX при использовании «jsx:act-jsx*». */
    // "reactNamespace": "",                             /* Укажите объект, вызываемый для createElement. Это применимо только при нацеливании на «реагирующий» JSX-испуск. */
    // "noLib": true,                                    /* Отключите включение любых файлов библиотеки, включая файл lib.d.ts по умолчанию. */
    // "useDefineForClassFields": true,                  /* Создание полей класса, соответствующих стандарту ECMAScript. */
    // "moduleDetection": "auto",                        /* Укажите, какой метод используется для обнаружения файлов JS в формате модуля. */
    /* Modules */
    "module": "commonjs", ////////////////////////////////* Укажите, какой код модуля генерируется. */
    // "rootDir": "./",                                  /* Укажите корневую папку в исходных файлах. */
    // "moduleResolution": "node10",                     /* Укажите, как TypeScript ищет файл по указанному спецификатору модуля. */
    // "baseUrl": "./",                                  /* Укажите базовый каталог для разрешения неотносительных имен модулей. */
    // "paths": {},                                      /* Укажите набор записей, которые переназначают импорт на дополнительные места поиска. */
    // "rootDirs": [],                                   /* Разрешить обработку нескольких папок как одной при разрешении модулей. */
    // "typeRoots": [],                                  /* Укажите несколько папок, которые будут выглядеть как «./node_modules/@types». */
    // "types": [],                                      /* Укажите имена пакетов типов, которые будут включены без ссылки на них в исходном файле. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным переменным UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    // "allowImportingTsExtensions": true,               /* Разрешить импортировать расширения файлов TypeScript. Требуется установить --moduleResolution packager и --noEmit или --emitDeclarationOnly. */
    // "resolvePackageJsonExports": true,                /* Используйте поле «exports» package.json при разрешении импорта пакетов. */
    // "resolvePackageJsonImports": true,                /* Используйте поле «imports» package.json при разрешении импорта. */
    // "customConditions": [],                           /* Условия, которые необходимо установить в дополнение к настройкам по умолчанию, специфичным для преобразователя, при разрешении импорта. */
    // "resolveJsonModule": true,                        /* Включите импорт файлов .json. */
    // "allowArbitraryExtensions": true,                 /* Разрешите импорт файлов с любым расширением при наличии файла декларации. */
    // "noResolve": true,                                /* Запретить 'import's, 'require's или <reference> увеличивать количество файлов, которые TypeScript должен добавить в проект. */
    /* JavaScript Support */
    // "allowJs": true,                                  /* Разрешите файлам JavaScript быть частью вашей программы. Используйте опцию «checkJS», чтобы получить ошибки из этих файлов. */
    // "checkJs": true,                                  /* Включите отчеты об ошибках в файлах JavaScript с проверкой типа. */
    // "maxNodeModuleJsDepth": 1,                        /* Укажите максимальную глубину папки, используемую для проверки файлов JavaScript из node_modules. Применимо только с «allowJs». */
    /* Emit */
    // "declaration": true,                              /* Создавайте файлы .d.ts из файлов TypeScript и JavaScript в своем проекте. */
    // "declarationMap": true,                           /* Создайте исходные карты для файлов d.ts. */
    // "emitDeclarationOnly": true,                      /* Выводите только файлы d.ts, а не файлы JavaScript. */
    // "sourceMap": true,                                /* Создайте исходные файлы карты для созданных файлов JavaScript. */
    // "inlineSourceMap": true,                          /* Включите файлы исходной карты в созданный JavaScript. */
    // "outFile": "./",                                  /* Укажите файл, который объединяет все выходные данные в один файл JavaScript. Если «declaration» истинно, также обозначает файл, который объединяет все выходные данные .d.ts. */
    // "outDir": "./",                                   /* Укажите выходную папку для всех отправляемых файлов. */
    // "removeComments": true,                           /* Отключите отправку комментариев. */
    // "noEmit": true,                                   /* Отключить отправку файлов из компиляции. */
    // "importHelpers": true,                            /* Разрешить импорт вспомогательных функций из tslib один раз для каждого проекта, а не включать их в каждый файл. */
    // "importsNotUsedAsValues": "remove",               /* Укажите поведение отправки/проверки для импорта, который используется только для типов. */
    // "downlevelIteration": true,                       /* Выдавайте более совместимый, но многословный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Укажите корневой путь, чтобы отладчики могли найти исходный код ссылки. */
    // "mapRoot": "",                                    /* Укажите местоположение, в котором отладчик должен размещать файлы карт вместо созданных местоположений. */
    // "inlineSources": true,                            /* Включите исходный код в исходные карты внутри созданного JavaScript. */
    // "emitBOM": true,                                  /* Создавайте метку порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установите символ новой строки для отправки файлов. */
    // "stripInternal": true,                            /* Отключите объявления, содержащие @internal в комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключите создание пользовательских вспомогательных функций, таких как «__extends», в скомпилированном выводе. */
    // "noEmitOnError": true,                            /* Отключите отправку файлов, если сообщается об ошибках проверки типов. */
    // "preserveConstEnums": true,                       /* Отключите удаление объявлений const enum в сгенерированном коде. */
    // "declarationDir": "./",                           /* Укажите выходной каталог для созданных файлов объявлений. */
    // "preserveValueImports": true,                     /* Сохраняйте неиспользуемые импортированные значения в выходных данных JavaScript, которые в противном случае были бы удалены. */
    /* Interop Constraints */
    // "isolatedModules": true,                          /* Убедитесь, что каждый файл можно безопасно перенести, не полагаясь на другой импорт. */
    // "verbatimModuleSyntax": true,                     /* Не преобразовывайте и не удаляйте любые операции импорта или экспорта, не помеченные как только текстовые, гарантируя, что они записаны в формате выходного файла на основе настройки «module». */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', если у модуля нет экспорта по умолчанию. */
    "esModuleInterop": true, /////////////////////////////* Создайте дополнительный код JavaScript, чтобы упростить поддержку импорта модулей CommonJS. Это включает «allowSyntheticDefaultImports» для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключите разрешение символических ссылок на их реальный путь. Это соответствует тому же флагу в узле. */
    "forceConsistentCasingInFileNames": true, ////////////* Убедитесь, что при импорте указан правильный регистр. */
    /* Type Checking */
    "strict": true, //////////////////////////////////////* Включите все параметры строгой проверки типов. */
    // "noImplicitAny": true,                            /* Включите отчеты об ошибках для выражений и объявлений с подразумеваемым типом «any». */
    // "strictNullChecks": true,                         /* При проверке типа учитывайте значения «null» и «undef». */
    // "strictFunctionTypes": true,                      /* При назначении функций убедитесь, что параметры и возвращаемые значения совместимы по подтипам. */
    // "strictBindCallApply": true,                      /* Убедитесь, что аргументы методов «bind», «call» и «apply» соответствуют исходной функции. */
    // "strictPropertyInitialization": true,             /* Проверьте свойства класса, которые объявлены, но не установлены в конструкторе. */
    // "noImplicitThis": true,                           /* Включить отчет об ошибках, когда «этому» присвоен тип «any». */
    // "useUnknownInCatchVariables": true,               /* Переменные предложения catch по умолчанию имеют значение «unknown» вместо «any». */
    // "alwaysStrict": true,                             /* Убедитесь, что «use strict» всегда генерируется. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Включите отчеты об ошибках, когда локальные переменные не читаются. */
    // "exactOptionalPropertyTypes": true,               /* Интерпретируйте необязательные типы свойств так, как они написаны, а не добавляйте «undefined». */
    // "noImplicitReturns": true,                        /* Включите отчеты об ошибках для путей кода, которые явно не возвращаются в функцию. */
    // "noFallthroughCasesInSwitch": true,               /* Включите отчеты об ошибках для случаев сбоя в операторах переключения. */
    // "noUncheckedIndexedAccess": true,                 /* Добавьте «undefined» к типу при доступе с использованием индекса. */
    // "noImplicitOverride": true,                       /* Убедитесь, что переопределяющие члены в производных классах отмечены модификатором переопределения. */
    // "noPropertyAccessFromIndexSignature": true,       /* Обеспечивает использование индексированных методов доступа для ключей, объявленных с использованием индексированного типа. */
    // "allowUnusedLabels": true,                        /* Отключите отчеты об ошибках для неиспользуемых ярлыков. */
    // "allowUnreachableCode": true,                     /* Отключите отчеты об ошибках для недостижимого кода. */
    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типа файлов .d.ts, включенных в TypeScript. */
    "skipLibCheck": true /////////////////////////////////* Пропустить проверку типа для всех файлов .d.ts. */
  }
}